#!/bin/bash

echo "üîç Verifying Backend Setup..."
echo ""

# Check if Docker is running
if ! docker info > /dev/null 2>&1; then
    echo "‚ùå Docker is not running. Please start Docker first."
    exit 1
fi
echo "‚úÖ Docker is running"

# Check if containers are running
POSTGRES_RUNNING=$(docker ps --filter "name=kendy-postgres" --format "{{.Names}}" 2>/dev/null)
REDIS_RUNNING=$(docker ps --filter "name=kendy-redis" --format "{{.Names}}" 2>/dev/null)

if [ -z "$POSTGRES_RUNNING" ]; then
    echo "‚ùå PostgreSQL container is not running"
    echo "   Run: make dev-up"
    exit 1
fi
echo "‚úÖ PostgreSQL container is running"

if [ -z "$REDIS_RUNNING" ]; then
    echo "‚ùå Redis container is not running"
    echo "   Run: make dev-up"
    exit 1
fi
echo "‚úÖ Redis container is running"

# Check PostgreSQL connection
if docker exec kendy-postgres pg_isready -U kendy_user > /dev/null 2>&1; then
    echo "‚úÖ PostgreSQL is accepting connections"
else
    echo "‚ùå PostgreSQL is not accepting connections"
    exit 1
fi

# Check Redis connection
if docker exec kendy-redis redis-cli ping > /dev/null 2>&1; then
    echo "‚úÖ Redis is accepting connections"
else
    echo "‚ùå Redis is not accepting connections"
    exit 1
fi

# Check if node_modules exists
if [ -d "node_modules" ]; then
    echo "‚úÖ Node dependencies are installed"
else
    echo "‚ö†Ô∏è  Node dependencies not installed"
    echo "   Run: npm install"
fi

# Check if TypeScript compiles
if [ -d "node_modules" ]; then
    if npm run build > /dev/null 2>&1; then
        echo "‚úÖ TypeScript code compiles successfully"
    else
        echo "‚ö†Ô∏è  TypeScript compilation has issues"
        echo "   Run: npm run build"
    fi
fi

echo ""
echo "üéâ Setup verification complete!"
echo ""
echo "Next steps:"
echo "  1. Start the development server: npm run dev"
echo "  2. Test the health endpoint: curl http://localhost:3000/api/health"
echo ""
